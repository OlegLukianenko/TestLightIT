// Generated by Dagger (https://google.github.io/dagger).
package lightIT.test.application.viewmodel;

import dagger.internal.Factory;
import javax.inject.Provider;
import lightIT.test.application.data.repository.RepositoryApi;

public final class LoginFragmentViewModel_Factory implements Factory<LoginFragmentViewModel> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  public LoginFragmentViewModel_Factory(Provider<RepositoryApi> repositoryApiProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
  }

  @Override
  public LoginFragmentViewModel get() {
    return provideInstance(repositoryApiProvider);
  }

  public static LoginFragmentViewModel provideInstance(
      Provider<RepositoryApi> repositoryApiProvider) {
    LoginFragmentViewModel instance = new LoginFragmentViewModel();
    LoginFragmentViewModel_MembersInjector.injectRepositoryApi(
        instance, repositoryApiProvider.get());
    return instance;
  }

  public static LoginFragmentViewModel_Factory create(
      Provider<RepositoryApi> repositoryApiProvider) {
    return new LoginFragmentViewModel_Factory(repositoryApiProvider);
  }

  public static LoginFragmentViewModel newLoginFragmentViewModel() {
    return new LoginFragmentViewModel();
  }
}
