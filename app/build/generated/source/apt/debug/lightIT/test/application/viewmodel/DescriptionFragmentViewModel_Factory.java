// Generated by Dagger (https://google.github.io/dagger).
package lightIT.test.application.viewmodel;

import dagger.internal.Factory;
import javax.inject.Provider;
import lightIT.test.application.data.repository.RepositoryApi;

public final class DescriptionFragmentViewModel_Factory
    implements Factory<DescriptionFragmentViewModel> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  public DescriptionFragmentViewModel_Factory(Provider<RepositoryApi> repositoryApiProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
  }

  @Override
  public DescriptionFragmentViewModel get() {
    return provideInstance(repositoryApiProvider);
  }

  public static DescriptionFragmentViewModel provideInstance(
      Provider<RepositoryApi> repositoryApiProvider) {
    DescriptionFragmentViewModel instance = new DescriptionFragmentViewModel();
    DescriptionFragmentViewModel_MembersInjector.injectRepositoryApi(
        instance, repositoryApiProvider.get());
    return instance;
  }

  public static DescriptionFragmentViewModel_Factory create(
      Provider<RepositoryApi> repositoryApiProvider) {
    return new DescriptionFragmentViewModel_Factory(repositoryApiProvider);
  }

  public static DescriptionFragmentViewModel newDescriptionFragmentViewModel() {
    return new DescriptionFragmentViewModel();
  }
}
