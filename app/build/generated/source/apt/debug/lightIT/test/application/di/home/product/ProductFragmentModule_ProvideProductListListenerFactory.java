// Generated by Dagger (https://google.github.io/dagger).
package lightIT.test.application.di.home.product;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lightIT.test.application.app.home.ProductFragment;
import lightIT.test.application.app.home.adapter.ProductRecyclerAdapter;

public final class ProductFragmentModule_ProvideProductListListenerFactory
    implements Factory<ProductRecyclerAdapter.ProductItemListListener> {
  private final ProductFragmentModule module;

  private final Provider<ProductFragment> fragmentProvider;

  public ProductFragmentModule_ProvideProductListListenerFactory(
      ProductFragmentModule module, Provider<ProductFragment> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public ProductRecyclerAdapter.ProductItemListListener get() {
    return provideInstance(module, fragmentProvider);
  }

  public static ProductRecyclerAdapter.ProductItemListListener provideInstance(
      ProductFragmentModule module, Provider<ProductFragment> fragmentProvider) {
    return proxyProvideProductListListener(module, fragmentProvider.get());
  }

  public static ProductFragmentModule_ProvideProductListListenerFactory create(
      ProductFragmentModule module, Provider<ProductFragment> fragmentProvider) {
    return new ProductFragmentModule_ProvideProductListListenerFactory(module, fragmentProvider);
  }

  public static ProductRecyclerAdapter.ProductItemListListener proxyProvideProductListListener(
      ProductFragmentModule instance, ProductFragment fragment) {
    return Preconditions.checkNotNull(
        instance.provideProductListListener(fragment),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
