// Generated by Dagger (https://google.github.io/dagger).
package lightIT.test.application.viewmodel;

import dagger.internal.Factory;
import javax.inject.Provider;
import lightIT.test.application.data.repository.RepositoryApi;
import lightIT.test.application.utils.NetworkHelper;

public final class RegistrationFragmentViewModel_Factory
    implements Factory<RegistrationFragmentViewModel> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  public RegistrationFragmentViewModel_Factory(
      Provider<RepositoryApi> repositoryApiProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
    this.networkHelperProvider = networkHelperProvider;
  }

  @Override
  public RegistrationFragmentViewModel get() {
    return provideInstance(repositoryApiProvider, networkHelperProvider);
  }

  public static RegistrationFragmentViewModel provideInstance(
      Provider<RepositoryApi> repositoryApiProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    RegistrationFragmentViewModel instance = new RegistrationFragmentViewModel();
    RegistrationFragmentViewModel_MembersInjector.injectRepositoryApi(
        instance, repositoryApiProvider.get());
    RegistrationFragmentViewModel_MembersInjector.injectNetworkHelper(
        instance, networkHelperProvider.get());
    return instance;
  }

  public static RegistrationFragmentViewModel_Factory create(
      Provider<RepositoryApi> repositoryApiProvider,
      Provider<NetworkHelper> networkHelperProvider) {
    return new RegistrationFragmentViewModel_Factory(repositoryApiProvider, networkHelperProvider);
  }

  public static RegistrationFragmentViewModel newRegistrationFragmentViewModel() {
    return new RegistrationFragmentViewModel();
  }
}
