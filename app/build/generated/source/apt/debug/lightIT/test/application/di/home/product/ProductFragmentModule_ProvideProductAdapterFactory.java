// Generated by Dagger (https://google.github.io/dagger).
package lightIT.test.application.di.home.product;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import lightIT.test.application.app.home.adapter.ProductRecyclerAdapter;

public final class ProductFragmentModule_ProvideProductAdapterFactory
    implements Factory<ProductRecyclerAdapter> {
  private final ProductFragmentModule module;

  private final Provider<ProductRecyclerAdapter.ProductItemListListener> listenerProvider;

  public ProductFragmentModule_ProvideProductAdapterFactory(
      ProductFragmentModule module,
      Provider<ProductRecyclerAdapter.ProductItemListListener> listenerProvider) {
    this.module = module;
    this.listenerProvider = listenerProvider;
  }

  @Override
  public ProductRecyclerAdapter get() {
    return provideInstance(module, listenerProvider);
  }

  public static ProductRecyclerAdapter provideInstance(
      ProductFragmentModule module,
      Provider<ProductRecyclerAdapter.ProductItemListListener> listenerProvider) {
    return proxyProvideProductAdapter(module, listenerProvider.get());
  }

  public static ProductFragmentModule_ProvideProductAdapterFactory create(
      ProductFragmentModule module,
      Provider<ProductRecyclerAdapter.ProductItemListListener> listenerProvider) {
    return new ProductFragmentModule_ProvideProductAdapterFactory(module, listenerProvider);
  }

  public static ProductRecyclerAdapter proxyProvideProductAdapter(
      ProductFragmentModule instance, ProductRecyclerAdapter.ProductItemListListener listener) {
    return Preconditions.checkNotNull(
        instance.provideProductAdapter(listener),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
